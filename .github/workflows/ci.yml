name: CI

on:
  push:
    branches: [master, trying, staging]
  pull_request:
    branches: [master, trying, staging]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{matrix.os}}

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_USER: geoengine
          POSTGRES_PASSWORD: geoengine
          POSTGRES_DB: geoengine
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        os:
          - ubuntu-22.04
        features: ["", "--features pro", "--all-features"]
        build: [""]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: APT update
        run: sudo apt-get update
      - name: Install lld & GDAL
        run: |
          sudo apt-get install lld libgdal-dev gdal-bin build-essential curl
          export C_INCLUDE_PATH=/usr/include/gdal:$C_INCLUDE_PATH
          export CPLUS_INCLUDE_PATH=/usr/include/gdal:$CPLUS_INCLUDE_PATH
          sudo ldconfig
      - name: Install Rustup
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
      - name: Init rustup toolchain
        # somehow rustup show will take care to initialize the version based on the toolchain file
        run: rustup show
      - name: setup rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          # An explicit cache key that is used instead of the automatic `job`-based
          # cache key and is thus stable across jobs.
          # Default: empty
          shared-key: ""

          # An additional cache key that is added alongside the automatic `job`-based
          # cache key and can be used to further differentiate jobs.
          # Default: empty
          key: ci_test_${{ matrix.os }}_${{ matrix.features }}_${{ matrix.build }}

          # A whitespace separated list of env-var *prefixes* who's value contributes
          # to the environment cache key.
          # The env-vars are matched by *prefix*, so the default `RUST` var will
          # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
          # Default: "CARGO CC CFLAGS CXX CMAKE RUST"
          #env-vars: ""

          # The cargo workspaces and target directory configuration.
          # These entries are separated by newlines and have the form
          # `$workspace -> $target`. The `$target` part is treated as a directory
          # relative to the `$workspace` and defaults to "target" if not explicitly given.
          # Default: ". -> target"
          #workspaces: ""

          # Determines if the cache should be saved even when the workflow has failed.
          # Default: "false"
          #cache-on-failure: ""
      - name: Check with Rustfmt
        run: cargo fmt --all -- --check
      - name: Check with Clippy
        run: cargo clippy --all-targets ${{ matrix.features }} ${{ matrix.build }} -- -D warnings
      - name: Run tests
        run: cargo test ${{ matrix.features }} ${{ matrix.build }} --verbose

  build:
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os:
          - ubuntu-22.04
        features: ["", "--features pro", "--all-features"]
        build: ["", "--release"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: APT update
        run: sudo apt-get update
      - name: Install lld & GDAL
        run: |
          sudo apt-get install lld libgdal-dev gdal-bin build-essential curl
          export C_INCLUDE_PATH=/usr/include/gdal:$C_INCLUDE_PATH
          export CPLUS_INCLUDE_PATH=/usr/include/gdal:$CPLUS_INCLUDE_PATH
          sudo ldconfig
      - name: Install Rustup
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
      - name: Init rustup toolchain
        # somehow rustup show will take care to initialize the version based on the toolchain file
        run: rustup show
      - name: setup rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          # An explicit cache key that is used instead of the automatic `job`-based
          # cache key and is thus stable across jobs.
          # Default: empty
          shared-key: ""

          # An additional cache key that is added alongside the automatic `job`-based
          # cache key and can be used to further differentiate jobs.
          # Default: empty
          key: ci_test_${{ matrix.os }}_${{ matrix.features }}_${{ matrix.build }}

          # A whitespace separated list of env-var *prefixes* who's value contributes
          # to the environment cache key.
          # The env-vars are matched by *prefix*, so the default `RUST` var will
          # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
          # Default: "CARGO CC CFLAGS CXX CMAKE RUST"
          #env-vars: ""

          # The cargo workspaces and target directory configuration.
          # These entries are separated by newlines and have the form
          # `$workspace -> $target`. The `$target` part is treated as a directory
          # relative to the `$workspace` and defaults to "target" if not explicitly given.
          # Default: ". -> target"
          #workspaces: ""

          # Determines if the cache should be saved even when the workflow has failed.
          # Default: "false"
          #cache-on-failure: ""
      - name: Build
        run: cargo build ${{ matrix.features }} ${{ matrix.build }} --verbose
      - name: Run the server
        run: |
          PID=$(cargo run ${{ matrix.features }} ${{ matrix.build }} > output.log 2>&1 & echo $!)
          echo "PID=$PID" >> $GITHUB_ENV
      - name: Wait for output to stop
        run: |
          # Set the path to the file to monitor
          FILE_PATH="output.log"

          # Set the timeout period in seconds
          CHECK_INTERVAL=10

          # Set the maximum number of runs
          MAX_RUNS=30

          # Get the initial modification time of the file
          LAST_MODIFIED=$(stat -c %Y "$FILE_PATH")

          # Loop until the file hasn't changed for the CHECK_INTERVAL period
          while true; do
            sleep $CHECK_INTERVAL

            # Get the current modification time of the file
            CURRENT_MODIFIED=$(stat -c %Y "$FILE_PATH")

            # If the file hasn't changed, stop monitoring
            if [[ $CURRENT_MODIFIED -eq $LAST_MODIFIED ]]; then
              break
            # If the file has changed, update the last modification time and continue monitoring
            else
              LAST_MODIFIED=$CURRENT_MODIFIED
            fi

            # Check if the maximum number of runs has been reached
            if [[ $MAX_RUNS -eq 0 ]]; then
              echo "Server did not stop outputting, exiting with error."
              exit 1
            fi

            # Decrement the maximum number of runs
            ((MAX_RUNS--))
          done
      - name: Kill the server
        run: kill ${{ env.PID }}
      - name: Ensure no warnings were printed
        run: |
          cat output.log
          if grep -q "WARNING" output.log; then
            echo "WARNINGS FOUND"
            exit 1
          fi
